/*
Input: Graph G, number of vertices |V|, number of edges |E|,
       Edge list edges containing source, destination, and weight,
       Source vertex source

1. Create an array distance of size |V| and initialize all values to infinity except distance[source] = 0.

2. Repeat the following |V| - 1 times:
     a. For each edge (u, v) with weight w in edges:
          - If distance[u] is not infinity and distance[u] + w < distance[v], update distance[v] = distance[u] + w.

3. For each edge (u, v) with weight w in edges:
     - If distance[u] is not infinity and distance[u] + w < distance[v], output "Negative cycle detected!" and terminate.

4. Output the computed distances for each vertex:
     For i = 0 to |V| - 1:
         - Output "Vertex i: Distance = distance[i]".

Output: Shortest distances from the source vertex to all other vertices in the graph, or a message indicating the presence of a negative cycle.

*/


import java.util.*;

class Edge {
    int source, destination, weight;

    Edge(int source, int destination, int weight) {
        this.source = source;
        this.destination = destination;
        this.weight = weight;
    }
}

public class BellmanFord {
    public static void bellmanFord(List<Edge> edges, int numVertices, int source) {
        int[] distance = new int[numVertices];
        Arrays.fill(distance, Integer.MAX_VALUE);
        distance[source] = 0;

        // Relax edges repeatedly (numVertices - 1) times
        for (int i = 0; i < numVertices - 1; i++) {
            for (Edge edge : edges) {
                int u = edge.source;
                int v = edge.destination;
                int weight = edge.weight;

                if (distance[u] != Integer.MAX_VALUE && distance[u] + weight < distance[v]) {
                    distance[v] = distance[u] + weight;
                }
            }
        }

        // Check for negative cycles
        for (Edge edge : edges) {
            int u = edge.source;
            int v = edge.destination;
            int weight = edge.weight;

            if (distance[u] != Integer.MAX_VALUE && distance[u] + weight < distance[v]) {
                System.out.println("Negative cycle detected!");
                return;
            }
        }

        // Print the distances
        for (int i = 0; i < numVertices; i++) {
            System.out.println("Vertex " + i + ": Distance = " + distance[i]);
        }
    }

    public static void main(String[] args) {
        int numVertices = 5;
        int numEdges = 8;

        List<Edge> edges = new ArrayList<>();
        edges.add(new Edge(0, 1, 6));
        edges.add(new Edge(0, 2, 7));
        edges.add(new Edge(1, 2, 8));
        edges.add(new Edge(1, 3, 4));
        edges.add(new Edge(1, 4, 5));
        edges.add(new Edge(2, 3, 9));
        edges.add(new Edge(2, 4, 3));
        edges.add(new Edge(3, 1, 2));

        int source = 0;

        bellmanFord(edges, numVertices, source);
    }
}
